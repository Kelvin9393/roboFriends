{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","console","log","map","user","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","App","onRequestRobots","_this$props","searchField","onSearchChanged","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","components_Header","components_SearchBox","components_Scroll","ErrorBoundry_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","undefined","logger","createLogger","rootReducer","combineReducers","arguments","length","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.53ddca8e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id}) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5' >\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n  console.log('CardList')\n  return (\n    <div>\n      {robots.map(user => {\n        return <Card\n          key={user.id}\n          id={user.id}\n          name={user.name}\n          email={user.email} />\n      })}\n    </div>\n  )\n}\n\nexport default CardList","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  console.log('SearchBox')\n  return (\n    <div className='pa2' >\n      <input\n        aria-label='Search Robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search robots'\n        onChange={searchChange} />\n    </div>\n  )\n}\n\nexport default SearchBox","import React from 'react';\n\nconst Scroll = ({children}) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}} >\n      {children}\n    </div>\n  )\n}\n\nexport default Scroll","import React, { Component } from 'react'\n\nexport default class ErrorBoundry extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>\n    }\n    return this.props.children\n  }\n}","import React, { Component } from 'react';\n\nclass Header extends Component {\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return false\n  // }\n\n  render() {\n    console.log('Header')\n    return (\n      <div>\n        <h1 className='f1' >RoboFriends</h1>\n      </div>\n    )\n  }\n}\n\nexport default Header","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport './App.css'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport Header from '../components/Header'\n\nimport { setSearchField, requestRobots } from '../actions'\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChanged, robots, isPending } = this.props\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n    })\n\n    return isPending ?\n      <h1>Loading</h1> :\n      (<div className='tc' >\n        <Header />\n        <SearchBox searchChange={onSearchChanged} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>)\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChanged: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\n  CHANGE_SEARCH_FIELD,\n  REQEUEST_ROBOTS_PENDING,\n  REQEUEST_ROBOTS_SUCCESS,\n  REQEUEST_ROBOTS_FAILED\n} from './constants'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQEUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQEUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQEUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQEUEST_ROBOTS_PENDING = 'REQEUEST_ROBOTS_PENDING'\nexport const REQEUEST_ROBOTS_SUCCESS = 'REQEUEST_ROBOTS_SUCCESS'\nexport const REQEUEST_ROBOTS_FAILED = 'REQEUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQEUEST_ROBOTS_PENDING,\n  REQEUEST_ROBOTS_SUCCESS,\n  REQEUEST_ROBOTS_FAILED\n} from './constants'\n\nconst initialStateSearch = {\n  searchField: '',\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload })\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: undefined,\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQEUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQEUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQEUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false })\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}